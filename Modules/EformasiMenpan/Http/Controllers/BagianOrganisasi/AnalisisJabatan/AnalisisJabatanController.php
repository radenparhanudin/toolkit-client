<?php
bolt_decrypt( __FILE__ , 'yDKvBH'); return 0;
##!!!##